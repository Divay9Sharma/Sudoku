{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Divay Sharma\\\\Coding\\\\sudoku-game-main\\\\client\\\\src\\\\Sudoku.js\",\n  _s = $RefreshSig$();\nimport \"./App.css\";\nimport React, { useState, useRef } from \"react\";\nimport Board from \"./ui/Board\";\nimport Interface from \"./ui/Interface\";\nimport { REST } from \"./services/api.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst gridInfo = [];\nfor (let i = 0; i < 9; i++) {\n  gridInfo[i] = Array(9).fill(0);\n}\nfunction getGrid() {\n  const grid = [];\n  for (let i = 0; i < 9; i++) {\n    grid[i] = Array(9).fill(0);\n  }\n  return grid;\n}\nfunction copy2DArray(from, to) {\n  for (let i = 0; i < from.length; i++) {\n    to[i] = [...from[i]];\n  }\n}\nfunction Sudoku() {\n  _s();\n  const [grid, setGrid] = useState(getGrid);\n  const [puzzleStatus, setPuzzleStatus] = useState(\"** UNSOLVED **\");\n  const initialGrid = useRef(getGrid());\n  function handleClick(row, col, e) {\n    let isSelected = gridInfo[row][col];\n    for (let i = 0; i < 9; i++) {\n      for (let j = 0; j < 9; j++) {\n        let element = document.getElementById(i + \" \" + j);\n        gridInfo[i][j] = 0;\n        initialGrid.current[i][j] !== 0 ? element.className = \"tile fixed\" : grid[i][j] !== 0 ? element.className = \"tile taken\" : element.className = \"tile\";\n        if (i % 3 === 0) element.className += \" horizontal-line-top\";\n        if (j % 3 === 0) element.className += \" vertical-line-left\";\n        if (i === 8) element.className += \" horizontal-line-bottom\";\n        if (j === 8) element.className += \" vertical-line-right\";\n      }\n    }\n    if (!isSelected) {\n      e.target.className = \"tile selected\";\n      gridInfo[row][col] = 1;\n    }\n  }\n  function handleChange(row, col, e) {\n    const re = /^[0-9\\b]+$/;\n    if (e.target.value === \"\" || re.test(e.target.value)) {\n      if (initialGrid.current[row][col] === 0 && gridInfo[row][col] === 1) {\n        const newGrid = [...grid];\n        newGrid[row][col] = Number(e.target.value % 10);\n        setGrid(newGrid);\n      }\n    }\n  }\n  async function handleInterface(action) {\n    let newGrid;\n    switch (action) {\n      case \"create\":\n        newGrid = await handleCreate();\n        copy2DArray(newGrid, initialGrid.current);\n        setPuzzleStatus(\"\");\n        setGrid(newGrid);\n        break;\n      case \"solve\":\n        newGrid = await handleSolve();\n        setGrid(newGrid);\n        break;\n      case \"clear\":\n        newGrid = getGrid();\n        copy2DArray(newGrid, initialGrid.current);\n        setGrid(newGrid);\n        setPuzzleStatus(\"\");\n        break;\n      case \"validate\":\n        const status = await handleValidate();\n        const puzzStats = status ? \"** SOLVED **\" : \"** UNSOLVED **\";\n        setPuzzleStatus(puzzStats);\n        break;\n      default:\n        throw new Error(\"Invalid action\");\n    }\n  }\n  async function handleCreate() {\n    try {\n      const response = await REST.getBoard();\n      const data = await response.json();\n      return data.game;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  async function handleValidate() {\n    try {\n      const response = await REST.validateBoard(grid);\n      const data = await response.json();\n      return data.status;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  async function handleSolve() {\n    try {\n      const response = await REST.solveBoard(grid);\n      const data = await response.json();\n      if (data.status) {\n        setPuzzleStatus(\"** SOLVED **\");\n        return data.solution;\n      } else {\n        setPuzzleStatus(\"** UNSOLVABLE **\");\n        return grid;\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Sudoku\",\n    children: [/*#__PURE__*/_jsxDEV(Board, {\n      puzzle: initialGrid.current,\n      grid: grid,\n      gridInfo: gridInfo,\n      handleChange: handleChange,\n      handleClick: handleClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Interface, {\n      handleInterface: handleInterface,\n      status: puzzleStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n}\n_s(Sudoku, \"bCq9JHtiLr7c5PUoQ6grxDf6724=\");\n_c = Sudoku;\nexport default Sudoku;\nvar _c;\n$RefreshReg$(_c, \"Sudoku\");","map":{"version":3,"names":["React","useState","useRef","Board","Interface","REST","jsxDEV","_jsxDEV","gridInfo","i","Array","fill","getGrid","grid","copy2DArray","from","to","length","Sudoku","_s","setGrid","puzzleStatus","setPuzzleStatus","initialGrid","handleClick","row","col","e","isSelected","j","element","document","getElementById","current","className","target","handleChange","re","value","test","newGrid","Number","handleInterface","action","handleCreate","handleSolve","status","handleValidate","puzzStats","Error","response","getBoard","data","json","game","error","console","log","validateBoard","solveBoard","solution","children","puzzle","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Divay Sharma/Coding/sudoku-game-main/client/src/Sudoku.js"],"sourcesContent":["import \"./App.css\";\nimport React, { useState, useRef } from \"react\";\nimport Board from \"./ui/Board\";\nimport Interface from \"./ui/Interface\";\nimport { REST } from \"./services/api.js\";\n\nconst gridInfo = [];\nfor (let i = 0; i < 9; i++) {\n  gridInfo[i] = Array(9).fill(0);\n}\n\nfunction getGrid() {\n  const grid = [];\n  for (let i = 0; i < 9; i++) {\n    grid[i] = Array(9).fill(0);\n  }\n  return grid;\n}\n\nfunction copy2DArray(from, to) {\n  for (let i = 0; i < from.length; i++) {\n    to[i] = [...from[i]];\n  }\n}\n\nfunction Sudoku() {\n  const [grid, setGrid] = useState(getGrid);\n  const [puzzleStatus, setPuzzleStatus] = useState(\"** UNSOLVED **\");\n  const initialGrid = useRef(getGrid());\n\n  function handleClick(row, col, e) {\n    let isSelected = gridInfo[row][col];\n    for (let i = 0; i < 9; i++) {\n      for (let j = 0; j < 9; j++) {\n        let element = document.getElementById(i + \" \" + j)\n        gridInfo[i][j] = 0;\n        initialGrid.current[i][j] !== 0\n          ? (element.className = \"tile fixed\")\n          : grid[i][j] !== 0\n          ? (element.className = \"tile taken\")\n          : (element.className = \"tile\");\n          \n          if(i%3===0) element.className += \" horizontal-line-top\"\n          if(j%3===0) element.className += \" vertical-line-left\"\n          if(i === 8) element.className += \" horizontal-line-bottom\"\n          if(j === 8) element.className += \" vertical-line-right\"\n      }\n    }\n    if (!isSelected) {\n      e.target.className = \"tile selected\";\n      gridInfo[row][col] = 1;\n    }\n  }\n\n  function handleChange(row, col, e) {\n    const re = /^[0-9\\b]+$/;\n    if (e.target.value === \"\" || re.test(e.target.value)) {\n      if (initialGrid.current[row][col] === 0 && gridInfo[row][col] === 1) {\n        const newGrid = [...grid];\n        newGrid[row][col] = Number(e.target.value % 10);\n        setGrid(newGrid);\n      }\n    }\n  }\n\n  async function handleInterface(action) {\n    let newGrid;\n    switch (action) {\n      case \"create\":\n        newGrid = await handleCreate();\n        copy2DArray(newGrid, initialGrid.current);\n        setPuzzleStatus(\"\");\n        setGrid(newGrid);\n        break;\n      case \"solve\":\n        newGrid = await handleSolve();\n        setGrid(newGrid);\n        break;\n      case \"clear\":\n        newGrid = getGrid();\n        copy2DArray(newGrid, initialGrid.current);\n        setGrid(newGrid);\n        setPuzzleStatus(\"\");\n        break;\n      case \"validate\":\n        const status = await handleValidate();\n        const puzzStats = status ? \"** SOLVED **\" : \"** UNSOLVED **\";\n        setPuzzleStatus(puzzStats);\n        break;\n      default:\n        throw new Error(\"Invalid action\");\n    }\n  }\n\n  async function handleCreate() {\n    try {\n      const response = await REST.getBoard();\n      const data = await response.json();\n      return data.game;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async function handleValidate() {\n    try {\n      const response = await REST.validateBoard(grid);\n      const data = await response.json();\n      return data.status;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async function handleSolve() {\n    try {\n      const response = await REST.solveBoard(grid);\n      const data = await response.json();\n      if (data.status) {\n        setPuzzleStatus(\"** SOLVED **\");\n        return data.solution;\n      } else {\n        setPuzzleStatus(\"** UNSOLVABLE **\");\n        return grid;\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  return (\n    <div className=\"Sudoku\">\n      <Board\n        puzzle={initialGrid.current}\n        grid={grid}\n        gridInfo={gridInfo}\n        handleChange={handleChange}\n        handleClick={handleClick}\n      />\n      <Interface handleInterface={handleInterface} status={puzzleStatus} />\n    </div>\n  );\n}\n\nexport default Sudoku;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}